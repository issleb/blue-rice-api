---
Description: An AWS Serverless Application that uses the ASP.NET Core framework running
  in Amazon Lambda.
Parameters:
  ShouldCreateBucket:
    Type: String
    Description: If true then the S3 bucket that will be proxied will be created with
      the CloudFormation stack.
    AllowedValues:
    - 'true'
    - 'false'
  BucketName:
    MinLength: '0'
    Type: String
    Description: Name of S3 bucket that will be proxied. If left blank a new table
      will be created.
AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  S3ProxyBucket:
    Value:
      Fn::If:
      - CreateS3Bucket
      - Ref: Bucket
      - Ref: BucketName
Conditions:
  CreateS3Bucket:
    Fn::Equals:
    - Ref: ShouldCreateBucket
    - 'true'
  BucketNameGenerated:
    Fn::Equals:
    - Ref: BucketName
    - ''
Resources:
  GetPutResourcePermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: Get
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/ANY/*
        - __Stage__: Prod
          __ApiId__:
            Ref: ServerlessRestApi
  ServerlessRestApiDeploymentc984b67443:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ServerlessRestApi
      Description: 'RestApi deployment id: c984b6744319d095ec1ec629ee501590e5f54511'
      StageName: Stage
  Get:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: blue-rice-deploy
        S3Key: BlueRice.Api.Lambda/blue-rice-api-636471605089186323.zip
      Tags:
      - Value: SAM
        Key: lambda:createdBy
      MemorySize: 256
      Environment:
        Variables:
          AppS3Bucket:
            Fn::If:
            - CreateS3Bucket
            - Ref: Bucket
            - Ref: BucketName
      Handler: BlueRice.Api.Lambda::BlueRice.Api.Lambda.LambdaEntryPoint::FunctionHandlerAsync
      Role:
        Fn::GetAtt:
        - GetRole
        - Arn
      Timeout: 30
      Runtime: dotnetcore1.0
  ServerlessRestApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ServerlessRestApiDeploymentc984b67443
      RestApiId:
        Ref: ServerlessRestApi
      StageName: Prod
  GetPutResourcePermissionTest:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: Get
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/ANY/*
        - __Stage__: "*"
          __ApiId__:
            Ref: ServerlessRestApi
  GetRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
        - BucketNameGenerated
        - Ref: AWS::NoValue
        - Ref: BucketName
    Condition: CreateS3Bucket
  ServerlessRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: '1.0'
          title:
            Ref: AWS::StackName
        paths:
          "/{proxy+}":
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Get.Arn}/invocations
              responses: {}
        swagger: '2.0'
